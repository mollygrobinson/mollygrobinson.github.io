[
  {
    "objectID": "posts/march-madness-is-real/index.html",
    "href": "posts/march-madness-is-real/index.html",
    "title": "How I tried to perfect my March Madness",
    "section": "",
    "text": "The month of March brings many great things: some warmer weather, leprechauns, and a ton of basketball.\nPlus, it is arguably one of the best times of the year with the lovely March Madness tournament.\nFor this project, we were prompted with making a model to help us predict the outcome of games during the madness. I quickly learned no matter what metrics you pick, it’s literally impossible to get them all right, unless you’re just CRAZY lucky. For example, no one, or at least the vast majority of the population, would never pick Farleigh Dickinson over Purdue, or Princeton over Arizona.\nFor my predictors, I took a few different paths. I used my Big Ten tournament bracket as a learning experience and quickly learned that often less is more. First, I took possessions from each team, which helped see who usually takes control of the game more. Next, I looked at effective field goal shooting for each team, which was the team score divided by the possessions, then multiplied by 100. Another game changer for me was pace, or the cumulative mean for both offense and defense. This made a way different impact on the outcome of my games from my Big Ten Tournament predictions.\nThen along came my model games, which included team and opponent rolling defense, team and opponent rolling offense, cumulative defense and opponent rolling possessions. Then I fed it all through the lightgbm feature.\nHere’s the code block where I put everything into place.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\nset.seed(1234)\n\n\nteamgames &lt;- load_mbb_team_box(seasons = 2015:2023) \n\nteamstats &lt;- teamgames %&gt;% \n  mutate(\n    possessions = round(field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted), digits = 0),\n    team_score = free_throws_made + ((field_goals_made - three_point_field_goals_made)*2) + (three_point_field_goals_made*3),\n    off = (team_score/possessions)*100,\n    pos = cummean(possessions),\n    offmean = cummean(off)\n  ) %&gt;% filter(possessions &lt;= 90 & possessions &gt;= 53)\n\n\nrollingteamstats &lt;- teamstats %&gt;% \n  arrange(game_date) %&gt;%\n  group_by(team_short_display_name, season) %&gt;%\n  mutate(\n    team_rolling_off = rollmean(lag(off, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_pos = rollmean(lag(pos, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_offmean = rollmean(lag(offmean, n=1), k=5, align=\"right\", fill=NA)\n    ) %&gt;% \n  ungroup()\n\n\nteam_side &lt;- rollingteamstats %&gt;%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score,\n    possessions,\n    team_rolling_off,\n    offensive_rebounds, \n    defensive_rebounds,\n    team_rolling_pos,\n    team_rolling_offmean\n    )\n\n\nopponent_side &lt;- team_side %&gt;%\n  select(-opponent_team_id) %&gt;% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_possessions = possessions,\n    opponent_rolling_off = team_rolling_off,\n    opponent_offensive_rebounds = offensive_rebounds, \n    opponent_defensive_rebounds = defensive_rebounds,\n    opponent_rolling_pos = team_rolling_pos,\n    opponent_rolling_offmean = team_rolling_offmean\n  ) %&gt;%\n  mutate(opponent_team_id = as.numeric(opponent_team_id)\n)\n\n\ngames &lt;- team_side %&gt;% inner_join(opponent_side)\n\n\nteamdefensiveefficiency &lt;- games %&gt;% \n  arrange(game_date) %&gt;% \n  group_by(team_short_display_name, season) %&gt;% \n  mutate(\n    team_def = (opponent_score/opponent_possessions)*100,\n    team_rolling_def = rollmean(lag(team_def, n=1), k=15, align=\"right\", fill=NA),\n    team_cumulative_def = lag(cummean(team_def), n=1, default=0)\n    ) %&gt;%\n  ungroup() %&gt;%\n  select(game_id, team_short_display_name, team_rolling_def, team_cumulative_def)\n\n\n\nopponentdefensiveefficiency &lt;- games %&gt;% \n  arrange(game_date) %&gt;% \n  group_by(opponent_short_display_name, season) %&gt;% \n  mutate(\n    opponent_def = (team_score/possessions)*100,\n    opponent_rolling_def = rollmean(lag(opponent_def, n=1), k=15, align=\"right\", fill=NA),\n    opponent_cumulative_def = lag(cummean(opponent_def), n=1, default=0)\n    ) %&gt;%\n  ungroup() %&gt;%\n  select(game_id, opponent_short_display_name, opponent_rolling_def, opponent_cumulative_def)\ngames &lt;- games %&gt;% inner_join(teamdefensiveefficiency)\ngames &lt;- games %&gt;% inner_join(opponentdefensiveefficiency)\ngames &lt;- games %&gt;% mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n))) %&gt;% na.omit()\n\ngames$team_result &lt;- relevel(games$team_result, ref=\"W\")\n\n\nmodelgames &lt;- games %&gt;%\n  select(\n    game_id,\n    game_date,\n    team_short_display_name,\n    opponent_short_display_name,\n    season,\n    team_result,\n    team_rolling_def,\n    opponent_rolling_def,\n    team_rolling_offmean,\n    opponent_rolling_offmean,\n    team_cumulative_def,\n    opponent_cumulative_def,\n    team_rolling_pos,\n    opponent_rolling_pos\n    ) %&gt;% na.omit()\n\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\nlog_train &lt;- training(game_split)\nlog_test &lt;- testing(game_split)\n\n\nlightgbm_mod &lt;- \n  boost_tree() %&gt;%\n  set_engine(\"lightgbm\") %&gt;%\n  set_mode(mode = \"classification\")\n\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = log_train) %&gt;% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %&gt;%\n  step_normalize(all_predictors())\n\n\nlightgbm_workflow &lt;- \n  workflow() %&gt;% \n  add_model(lightgbm_mod) %&gt;% \n  add_recipe(game_recipe)\n\n\nlightgbm_fit &lt;- \n  lightgbm_workflow %&gt;% \n  fit(data = log_train)\n\nrollingteamstats &lt;- teamstats %&gt;% \n  arrange(game_date) %&gt;%\n  group_by(team_short_display_name, season) %&gt;%\n  mutate(\n    team_rolling_off = rollmean(off, k=5, align=\"right\", fill=NA),\n    team_rolling_pos = rollmean(pos, k=5, align=\"right\", fill=NA),\n    team_rolling_offmean = rollmean(offmean, k=5, align=\"right\", fill=NA)\n    ) %&gt;% \n  ungroup()\n\n\nteam_side &lt;- rollingteamstats %&gt;%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score,\n    possessions,\n    team_rolling_off,\n    offensive_rebounds, \n    defensive_rebounds,\n    team_rolling_pos,\n    team_rolling_offmean\n    )\n\n\nopponent_side &lt;- team_side %&gt;%\n  select(-opponent_team_id) %&gt;% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_possessions = possessions,\n    opponent_rolling_off = team_rolling_off,\n    opponent_offensive_rebounds = offensive_rebounds, \n    opponent_defensive_rebounds = defensive_rebounds,\n    opponent_rolling_pos = team_rolling_pos,\n    opponent_rolling_offmean = team_rolling_offmean\n  ) %&gt;%\n  mutate(opponent_team_id = as.numeric(opponent_team_id)\n)\n\n\ngames &lt;- team_side %&gt;% inner_join(opponent_side)\n\n\nteamdefensiveefficiency &lt;- games %&gt;% \n  arrange(game_date) %&gt;% \n  group_by(team_short_display_name, season) %&gt;% \n  mutate(\n    team_def = (opponent_score/opponent_possessions)*100,\n    team_rolling_def = rollmean(team_def, k=15, align=\"right\", fill=NA),\n    team_cumulative_def = cummean(team_def)\n    ) %&gt;%\n  ungroup() %&gt;%\n  select(game_id, team_short_display_name, team_rolling_def, team_cumulative_def)\n\n\n\nopponentdefensiveefficiency &lt;- games %&gt;% \n  arrange(game_date) %&gt;% \n  group_by(opponent_short_display_name, season) %&gt;% \n  mutate(\n    opponent_def = (team_score/possessions)*100,\n    opponent_rolling_def = rollmean(opponent_def, k=15, align=\"right\", fill=NA),\n    opponent_cumulative_def = cummean(opponent_def)\n    ) %&gt;%\n  ungroup() %&gt;%\n  select(game_id, opponent_short_display_name, opponent_rolling_def, opponent_cumulative_def)\ngames &lt;- games %&gt;% inner_join(teamdefensiveefficiency)\ngames &lt;- games %&gt;% inner_join(opponentdefensiveefficiency)\ngames &lt;- games %&gt;% mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_score ~ \"W\",\n    opponent_score &gt; team_score ~ \"L\"\n))) %&gt;% na.omit()\n\ngames$team_result &lt;- relevel(games$team_result, ref=\"W\")\n\n\nmodelgames &lt;- games %&gt;%\n  select(\n    game_id,\n    game_date,\n    team_short_display_name,\n    opponent_short_display_name,\n    season,\n    team_result,\n    team_rolling_def,\n    opponent_rolling_def,\n    team_rolling_offmean,\n    opponent_rolling_offmean,\n    team_cumulative_def,\n    opponent_cumulative_def,\n    team_rolling_pos,\n    opponent_rolling_pos\n    ) %&gt;% na.omit()\n\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Ilinois\"\n) %&gt;% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %&gt;% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Arizona State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %&gt;% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise State\"\n) %&gt;% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\n\n\nwestround1games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(westround1games)\n\n\nwestround1games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(westround1games) \n\n\n\nwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = westround1games) %&gt;%\n  bind_cols(westround1games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = westround1games, type=\"prob\") %&gt;%\n  bind_cols(westround1) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Arkansas\"\n) %&gt;% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Iona\"\n) %&gt;% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %&gt;% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"UCLA\"\n) \n\n\n\nwestround2games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(westround2games)\n\n\nwestround2games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(westround2games) \n\n\n\nwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = westround2games) %&gt;%\n  bind_cols(westround2games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = westround2games, type=\"prob\") %&gt;%\n  bind_cols(westround2) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"VCU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Grand Canyon\",\n  opponent_short_display_name=\"UCLA\"\n) \n\n\n\nwestround3games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(westround3games)\n\n\nwestround3games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(westround3games) \n\n\n\nwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = westround3games) %&gt;%\n  bind_cols(westround3games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = westround3games, type=\"prob\") %&gt;%\n  bind_cols(westround3) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"UCLA\"\n) \n\n\n\nwestround4games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(westround4games)\n\n\nwestround4games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(westround4games) \n\n\n\nwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = westround4games) %&gt;%\n  bind_cols(westround4games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = westround4games, type=\"prob\") %&gt;%\n  bind_cols(westround4) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"San Diego State\",\n  opponent_short_display_name=\"Charleston\"\n) %&gt;% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %&gt;% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\n\n\nsouthround1games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(southround1games)\n\n\nsouthround1games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(southround1games) \n\n\n\nsouthround1 &lt;- lightgbm_fit %&gt;% predict(new_data = southround1games) %&gt;%\n  bind_cols(southround1games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround1 &lt;- lightgbm_fit %&gt;% predict(new_data = southround1games, type=\"prob\") %&gt;%\n  bind_cols(southround1) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Maryland\"\n) %&gt;% add_row(\n  team_short_display_name=\"San Diego State\",\n  opponent_short_display_name=\"Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Baylor\"\n) %&gt;% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n) \n\n\n\nsouthround2games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(southround2games)\n\n\nsouthround2games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(southround2games) \n\n\n\nsouthround2 &lt;- lightgbm_fit %&gt;% predict(new_data = southround2games) %&gt;%\n  bind_cols(southround2games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround2 &lt;- lightgbm_fit %&gt;% predict(new_data = southround2games, type=\"prob\") %&gt;%\n  bind_cols(southround2) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Arizona\"\n) \n\n\n\nsouthround3games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(southround3games)\n\n\nsouthround3games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(southround3games) \n\n\n\nsouthround3 &lt;- lightgbm_fit %&gt;% predict(new_data = southround3games) %&gt;%\n  bind_cols(southround3games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround3 &lt;- lightgbm_fit %&gt;% predict(new_data = southround3games, type=\"prob\") %&gt;%\n  bind_cols(southround3) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Arizona\"\n) \n\n\n\nsouthround4games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(southround4games)\n\n\nsouthround4games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(southround4games) \n\n\n\nsouthround4 &lt;- lightgbm_fit %&gt;% predict(new_data = southround4games) %&gt;%\n  bind_cols(southround4games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround4 &lt;- lightgbm_fit %&gt;% predict(new_data = southround4games, type=\"prob\") %&gt;%\n  bind_cols(southround4) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Farleigh Dickinson\"\n) %&gt;% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %&gt;% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kansas State\",\n  opponent_short_display_name=\"Montana State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Michigan State\",\n  opponent_short_display_name=\"USC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)\n\n\n\neastround1games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(eastround1games)\n\n\neastround1games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(eastround1games) \n\n\n\neastround1 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround1games) %&gt;%\n  bind_cols(eastround1games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround1 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround1games, type=\"prob\") %&gt;%\n  bind_cols(eastround1) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"FAU\"\n) %&gt;% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Tennessee\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Kansas State\"\n) %&gt;% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Vermont\"\n) \n\n\n\neastround2games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(eastround2games)\n\n\neastround2games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(eastround2games) \n\n\n\neastround2 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround2games) %&gt;%\n  bind_cols(eastround2games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround2 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround2games, type=\"prob\") %&gt;%\n  bind_cols(eastround2) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"FAU\",\n  opponent_short_display_name=\"Tennessee\"\n) %&gt;% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"USC\"\n) \n\n\n\neastround3games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(eastround3games)\n\n\neastround3games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(eastround3games) \n\n\n\neastround3 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround3games) %&gt;%\n  bind_cols(eastround3games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround3 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround3games, type=\"prob\") %&gt;%\n  bind_cols(eastround3) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"USC\"\n) \n\n\n\neastround4games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(eastround4games)\n\n\neastround4games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(eastround4games) \n\n\n\neastround4 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround4games) %&gt;%\n  bind_cols(eastround4games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround4 &lt;- lightgbm_fit %&gt;% predict(new_data = eastround4games, type=\"prob\") %&gt;%\n  bind_cols(eastround4) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Norhtern Kentucky\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %&gt;% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %&gt;% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pittsburgh\"\n) %&gt;% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\n\n\nmidwestround1games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(midwestround1games)\n\n\nmidwestround1games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(midwestround1games) \n\n\n\nmidwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround1games) %&gt;%\n  bind_cols(midwestround1games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround1 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround1games, type=\"prob\") %&gt;%\n  bind_cols(midwestround1) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Auburn\"\n) %&gt;% add_row(\n  team_short_display_name=\"Drake\",\n  opponent_short_display_name=\"Kent State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Kennesaw State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Texas\"\n) \n\nmidwestround2games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(midwestround2games)\n\n\nmidwestround2games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(midwestround2games) \n\nmidwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround2games) %&gt;%\n  bind_cols(midwestround2games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround2 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround2games, type=\"prob\") %&gt;%\n  bind_cols(midwestround2) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Drake\"\n) %&gt;% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Texas\"\n) \n\n\n\nmidwestround3games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(midwestround3games)\n\n\nmidwestround3games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(midwestround3games) \n\n\n\nmidwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround3games) %&gt;%\n  bind_cols(midwestround3games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround3 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround3games, type=\"prob\") %&gt;%\n  bind_cols(midwestround3) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Texas\"\n) \n\n\n\nmidwestround4games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(midwestround4games)\n\n\nmidwestround4games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(midwestround4games) \n\n\n\nmidwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround4games) %&gt;%\n  bind_cols(midwestround4games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround4 &lt;- lightgbm_fit %&gt;% predict(new_data = midwestround4games, type=\"prob\") %&gt;%\n  bind_cols(midwestround4) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfourgames &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Tennessee\"\n) %&gt;% add_row(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"VCU\"\n) \n\nfinalfourgames &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(finalfourgames)\n\n\nfinalfourgames &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(finalfourgames) \n\n\nfinalfour &lt;- lightgbm_fit %&gt;% predict(new_data = finalfourgames) %&gt;%\n  bind_cols(finalfourgames) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nfinalfour &lt;- lightgbm_fit %&gt;% predict(new_data = finalfourgames, type=\"prob\") %&gt;%\n  bind_cols(finalfour) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nnattygames &lt;- tibble(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Houston\"\n) \n\nnattygames &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(nattygames)\n\n\nnattygames &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(nattygames) \n\nnatty &lt;- lightgbm_fit %&gt;% predict(new_data = nattygames) %&gt;%\n  bind_cols(nattygames) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nnatty &lt;- lightgbm_fit %&gt;% predict(new_data = nattygames, type=\"prob\") %&gt;%\n  bind_cols(natty) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nWith all of that in mind, here’s what it looks like all together.\nWith this graph, I took both the opponent and team rolling defenses and compared them to the team result.\n\n\nCode\nggplot(data=games, aes(x=team_rolling_def, y=opponent_rolling_def, color=team_result)) + \n  geom_point(size=1, shape=10, stroke=1) +\n  geom_smooth(method=\"lm\", se=FALSE, color=\"black\") +\n  labs(title=\"Rolling Defenses by Team Result\", x=\"Team Rolling Defense\", y=\"Opponent Rolling Defense\")\n\n\n\n\n\nNone of my regions were completely accurate, and my overall bracket hit a whopping 21% accuracy, which ranked me in the top 15 million brackets. But, let’s take a better look at my south region.\n\n\nCode\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %&gt;% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %&gt;% add_row(\n  team_short_display_name=\"San Diego State\",\n  opponent_short_display_name=\"Charleston\"\n) %&gt;% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %&gt;% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %&gt;% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %&gt;% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\n\n\nsouthround1games &lt;- modelgames %&gt;% \n  group_by(team_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  select(-team_result, -starts_with(\"opponent\")) %&gt;% \n  right_join(southround1games)\n\n\nsouthround1games &lt;- modelgames %&gt;% \n  group_by(opponent_short_display_name) %&gt;% \n  filter(game_date == max(game_date) & season == 2023) %&gt;% \n  ungroup() %&gt;% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %&gt;% \n  right_join(southround1games) \n\n\n\nsouthround1 &lt;- lightgbm_fit %&gt;% predict(new_data = southround1games) %&gt;%\n  bind_cols(southround1games) %&gt;% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround1 &lt;- lightgbm_fit %&gt;% predict(new_data = southround1games, type=\"prob\") %&gt;%\n  bind_cols(southround1) %&gt;% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround1 %&gt;% gt() %&gt;%\n  tab_header(\n    title = \"Who makes it out of the first round alive??\",\n    subtitle = \"Some of my predictions were great, others were not so great.\"\n  ) %&gt;%  \n  tab_source_note(\n    source_note = md(\"**By:** Molly Robinson  |  **Source:** [hoopr](https://hoopr.sportsdataverse.org/reference/index.html)\")\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %&gt;%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %&gt;%\n  opt_row_striping() %&gt;% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Who makes it out of the first round alive??\n    \n    \n      Some of my predictions were great, others were not so great.\n    \n    \n      .pred_class\n      .pred_W\n      .pred_L\n      team_short_display_name\n      opponent_short_display_name\n      opponent_rolling_def\n      opponent_rolling_offmean\n      opponent_cumulative_def\n      opponent_rolling_pos\n      game_id\n      game_date\n      season\n      team_rolling_def\n      team_rolling_offmean\n      team_cumulative_def\n      team_rolling_pos\n    \n  \n  \n    L\n0.3279216\n0.6720784\nSan Diego State\nCharleston\n91.49193\n102.4903\n94.30587\n69.57293\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n    W\n0.7215527\n0.2784473\nAlabama\nTexas A&M-CC\n103.42589\n102.4858\n101.45245\n69.57647\n401522197\n2023-03-24\n2023\n93.40313\n102.4814\n91.68726\n69.58361\n    L\n0.3699807\n0.6300193\nMissouri\nUtah State\n100.75909\n102.4829\n100.57239\n69.57925\n401522170\n2023-03-18\n2023\n108.03464\n102.4839\n105.68686\n69.57991\n    W\n0.5952709\n0.4047291\nMaryland\nWest Virginia\n106.26248\n102.4889\n101.85069\n69.57440\n401522159\n2023-03-18\n2023\n101.31957\n102.4835\n98.28184\n69.58000\n    W\n0.6392229\n0.3607771\nCreighton\nNC State\n108.22093\n102.4931\n101.11337\n69.57324\n401522199\n2023-03-26\n2023\n101.22169\n102.4817\n97.72871\n69.58448\n    W\n0.5487660\n0.4512340\nBaylor\nUCSB\n109.68198\n102.4832\n100.31167\n69.57930\n401522179\n2023-03-19\n2023\n109.07191\n102.4889\n104.07723\n69.57643\n    W\n0.6092526\n0.3907474\nVirginia\nFurman\n101.84741\n102.4857\n101.57093\n69.57682\n401522130\n2023-03-16\n2023\n96.97478\n102.4837\n96.42041\n69.57858\n    W\n0.6108574\n0.3891426\nArizona\nPrinceton\n103.83938\n102.4816\n98.46669\n69.58340\n401522134\n2023-03-16\n2023\n98.06557\n102.4831\n97.51326\n69.57926\n  \n  \n    \n      By: Molly Robinson  |  Source: hoopr\n    \n  \n  \n\n\n\n\nArizona beating Princeton? Reasonable pick, until the Wildcats were shocked. My biggest miss was picking Virginia over Furman. This also seems like a reasonable pick given the Cavalier’s successes over the years. But alas, it is March after all.\nAlabama winning the entire south didn’t particularity seem too far fetched, until San Diego State came along in the actual tournament…"
  },
  {
    "objectID": "posts/who-deserves-to-make-the-college-football-playoff/index.html",
    "href": "posts/who-deserves-to-make-the-college-football-playoff/index.html",
    "title": "Who deserves to be in the college football playoffs?",
    "section": "",
    "text": "It’s playoff season, which means teams are hopeful to clinch a spot in the College Football Playoff. Since 2014, we’ve seen a four-team playoff for eight years. In the past seven, we’ve seen a lot of the same teams, like Alabama, Clemson, and Ohio State, and occasionally Oklahoma and Notre Dame. However, this year looks slightly different. The undefeated Cincinnati Bearcats are in the playoff conversation, and here’s why they deserve a spot among the nations top Power Five teams.\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(ggrepel)\nlibrary(ggalt)\nlibrary(ggbump)\nlibrary(lubridate)\nlibrary(ggtext)\n\n\n\n\nCode\nespnfpi &lt;- read_csv(\"espnfpi.csv\")\n\n\nTo do this, lets look at offensive and defensive stats from 2014 to now (keep in mind, this is all prior to any championship game).\n\n\nCode\noffense14 &lt;- read_csv(\"totaloffense14.csv\") %&gt;% mutate(Season = 2014)\ndefense14 &lt;- read_csv(\"totaldefense14.csv\") %&gt;% mutate(Season = 2014)\noffense15 &lt;- read_csv(\"totaloffense15.csv\") %&gt;% mutate(Season = 2015)\ndefense15 &lt;- read_csv(\"totaldefense15.csv\") %&gt;% mutate(Season = 2015)\noffense16 &lt;- read_csv(\"totaloffense16.csv\") %&gt;% mutate(Season = 2016)\ndefense16 &lt;- read_csv(\"totaldefense16.csv\") %&gt;% mutate(Season = 2016)\noffense17 &lt;- read_csv(\"totaloffense17.csv\") %&gt;% mutate(Season = 2017)\ndefense17 &lt;- read_csv(\"totaldefense17.csv\") %&gt;% mutate(Season = 2017)\noffense18 &lt;- read_csv(\"totaloffense18.csv\") %&gt;% mutate(Season = 2018)\ndefense18 &lt;- read_csv(\"totaldefense18.csv\") %&gt;% mutate(Season = 2018)\noffense19 &lt;- read_csv(\"totaloffense19.csv\") %&gt;% mutate(Season = 2019)\ndefense19 &lt;- read_csv(\"totaldefense19.csv\") %&gt;% mutate(Season = 2019)\noffense20 &lt;- read_csv(\"totaloffense20.csv\") %&gt;% mutate(Season = 2020)\ndefense20 &lt;- read_csv(\"totaldefense20.csv\") %&gt;% mutate(Season = 2020)\noffense21 &lt;- read_csv(\"totaloffense21.csv\") %&gt;% mutate(Season = 2021)\ndefense21 &lt;- read_csv(\"totaldefense21.csv\") %&gt;% mutate(Season = 2021)\n\n\nNow that we have offensive and defensive stats from the playoff era, let’s combine them into their years.\n\n\nCode\nall14 &lt;- offense14 %&gt;% \n  left_join(defense14, by=c(\"Name\", \"G\", \"Season\"))\nall15 &lt;- offense15 %&gt;% \n  left_join(defense15, by=c(\"Name\", \"G\", \"Season\"))\nall16 &lt;- offense16 %&gt;% \n  left_join(defense16, by=c(\"Name\", \"G\", \"Season\"))\nall17 &lt;- offense17 %&gt;% \n  left_join(defense17, by=c(\"Name\", \"G\", \"Season\"))\nall18 &lt;- offense18 %&gt;% \n  left_join(defense18, by=c(\"Name\", \"G\", \"Season\"))\nall19 &lt;- offense19 %&gt;% \n  left_join(defense19, by=c(\"Name\", \"G\", \"Season\"))\nall20 &lt;- offense20 %&gt;% \n  left_join(defense20, by=c(\"Name\", \"G\", \"Season\"))\nall21 &lt;- offense21 %&gt;% \n  left_join(defense21, by=c(\"Name\", \"G\", \"Season\"))\n\n\nI also wanted to look at all of the top six teams we’ve seen since 2014. There’s been a lot of consistent teams, like Alabama, who’s been in the top six every year except for one. Clemson, Oklahoma and Ohio State are even in there quite a bit. Notice Cincinnati is the only Group 5 team on here.\n\n\nCode\ntopsix21 &lt;- c(\"Georgia\", \"Michigan\", \"Alabama\", \"Cincinnati\", \"Oklahoma State\", \"Notre Dame\")\ntopsix20 &lt;- c(\"Alabama\", \"Clemson\", \"Ohio State\", \"Notre Dame\", \"Texas A&M\", \"Oklahoma\")\ntopsix19 &lt;- c(\"LSU\", \"Ohio State\", \"Clemson\", \"Oklahoma\", \"Georgia\", \"Oregon\")\ntopsix18 &lt;- c(\"Alabama\", \"Clemson\", \"Notre Dame\", \"Oklahoma\", \"Georgia\", \"Ohio State\")\ntopsix17 &lt;- c(\"Clemson\", \"Oklahoma\", \"Georgia\", \"Alabama\", \"Ohio State\", \"Wisconsin\")\ntopsix16 &lt;- c(\"Alabama\", \"Clemson\", \"Ohio State\", \"Washington\", \"Penn State\", \"Michigan\")\ntopsix15 &lt;- c(\"Clemson\", \"Alabama\", \"Michigan State\", \"Oklahoma\", \"Iowa\", \"Standford\")\ntopsix14 &lt;- c(\"Alabama\", \"Oregon\", \"Florida State\", \"Ohio State\", \"Baylor\", \"TCU\")\n\n\n\n\nCode\nalltop6 &lt;- rbind(topsix14, topsix15)\nalltop6 &lt;- rbind(alltop6, topsix16)\nalltop6 &lt;- rbind(alltop6, topsix17)\nalltop6 &lt;- rbind(alltop6, topsix18)\nalltop6 &lt;- rbind(alltop6, topsix19)\nalltop6 &lt;- rbind(alltop6, topsix20)\nalltop6 &lt;- rbind(alltop6, topsix21)\n\n\n\n\nCode\nall &lt;- bind_rows(all14, all15, all16, all17, all18, all19, all20, all21)\n\n\nNext, I made a data frame combining every year, with both offense and defense, and put them all together. I also filtered out the top six from those years.\n\n\nCode\nall %&gt;% \n  filter(Name %in% alltop6) -&gt; topsixeveryyear\n\n\nWhen deciding what makes a top team, a lot more goes into account than just offense and defense. Something I also wanted to look at was each team’s FPI, or ESPN’s football power index. This was developed in 2013 to measure a team’s strength and predict season outcomes. FPI is composed of predicted offensive defensive, and special teams components, and all of this goes into a team’s rating. This rating goes into a team’s net scoring margin against an average FBS opponent.\n\n\nCode\nespnfpi %&gt;% \n  group_by(Team) -&gt; newfpi\n\n\n\n\nCode\nnewfpi &lt;- newfpi %&gt;% \n  separate(winnloss, into=c(\"Wins\", \"Losses\")) %&gt;% mutate(Wins = as.numeric(Wins))\n\n\n\n\nCode\nnewfpi %&gt;% \n  filter(Team %in% topsix21) -&gt; newtopsix\n\n\nHere, I gathered the FPI from 2021 (so far), and filtered out the top six teams. Along with FPI, I also wanted to take a look into each team’s chances of making the college football playoff. From ESPN, this is based off of total regular season wins, making the conference championship game and winning their certain conference.\n\n\nCode\nggplot() + \n  geom_point(\n    data=newfpi, aes(x=FPI, y=playoffpct, size=Wins), color=\"black\") +\n  geom_point(\n    data=newtopsix, aes(x=FPI, y=playoffpct, size=Wins), color=\"red\") +\n  geom_text_repel(\n    data=newtopsix, \n    aes(x=FPI, y=playoffpct, label=Team)) +\n  labs(\n    title=\"Who Deserves a Spot in the College Football Playoff?\", subtitle=\"Cincinnati isn't too far behind its Power Five foes.\", caption=\"Source: ESPN | By Molly Robinson\")  + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nI put the FPI on the x-axis, and playoff percent on the y. As we can see, the top six teams all have high FPI’s and high chances of making the playoff. The size of each team’s dot indicates their number of regular season wins.\nGeorgia sits on top in both categories, but close behind in FPI is Alabama. But, who’s that one lone black dot? That’s Ohio State, and they have a 0.1% chance of making the college football playoff this year.\nCincinnati has high chances and a high FPI. Theirs might not be as high as Notre Dame, Oklahoma State, or even Oklahoma, but this could be due to their competition and their conference itself.\n\n\nCode\nall %&gt;% \n  filter(Name %in% topsix21) -&gt; allteams \n\n\n\n\nCode\nallteams %&gt;% \n  mutate(\n    Name = case_when(Name == \"Alabama\" ~ \"Ala.\", Name == \"Georgia\" ~ \"UGA.\", Name == \"Cincinnati\" ~ \"Cincy.\", Name == \"Michigan\" ~ \"Mich.\", Name == \"Notre Dame\" ~ \"ND\", Name == \"Oklahoma State\" ~ \"OK St.\")) -&gt; shortnames\n\n\nNow, let’s look at some offensive and defensive stats and see where the Bearcats fall compared to their Power 5 foes.\n\n\nCode\nhead(shortnames)\n\n\n# A tibble: 6 × 17\n  Rank.x Name       G OffRushYa…¹ OffPa…² OffPl…³ OffTo…⁴ OffYa…⁵ OffYa…⁶ Season\n   &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1      7 Ala.      12        1804    4102     889    5906    6.64    492.   2014\n2     19 Mich.     12        2699    2715     845    5414    6.41    451.   2014\n3     27 UGA.      12        2427    2883     752    5310    7.06    442.   2014\n4     44 Cincy.    12        2133    3043     760    5176    6.81    431.   2014\n5     56 ND        12        1830    3163     814    4993    6.13    416.   2014\n6     61 OK St.    12        2289    2604     886    4893    5.52    408.   2014\n# … with 7 more variables: Rank.y &lt;dbl&gt;, DefRushYards &lt;dbl&gt;,\n#   DefPassYards &lt;dbl&gt;, DefPlays &lt;dbl&gt;, DefTotalYards &lt;dbl&gt;,\n#   `DefYards/Play` &lt;dbl&gt;, `DefYards/G` &lt;dbl&gt;, and abbreviated variable names\n#   ¹​OffRushYards, ²​OffPassYards, ³​OffPlays, ⁴​OffTotalYards, ⁵​`OffYards/Play`,\n#   ⁶​`OffYards/G`\n\n\nNext, I wanted to look at the top six teams past few seasons. Teams like Alabama, Georgia, Notre Dame, and even Michigan are usually consistently strong teams. All of these teams have seen the playoff before too. So, let’s see where Cincinnati falls using a bump chart showing every year.\n\n\nCode\nggplot() + \n  geom_bump(data=shortnames, \n    aes(x=Season, y=`OffYards/G`, color=Name)) +\n  geom_point(data=shortnames, \n    aes(x=Season, y=`OffYards/G`, color=Name), size = 4) +\n  geom_text(data = shortnames %&gt;% \n    filter(Season == min(Season)), aes(x = Season - .2, y=`OffYards/G`, label = Name), size = 3, hjust = 1) +\n  geom_text(data = shortnames %&gt;%\n    filter(Season == max(Season)), aes(x = Season + .2, y=`OffYards/G`, label = Name), size = 3, hjust = 0) +\n  scale_color_manual(values = c(\"#BA0C2F\",\"#595959\", \"#FFCB05\", \"#00843D\", \"#FF7300\", \"grey\")) +\n  scale_y_reverse() +\n  labs(x = \" \",\n    y=\"Offensive Yards per Game\", \n    title=\"Offenses Win Games...\", \n    subtitle=\"Cincy might not be Bama, but they stand with the others.\",\n    caption=\"Source: CFB Reference | By Molly Robinson\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 13), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_x_continuous(breaks=c(2014,2015,2016, 2017, 2018, 2019, 2020, 2021))\n\n\n\n\n\nHere’s each teams average offensive yards per game from 2014 until now. Of this top six squad, Cincy is the lowest of the pack in two different years, 2016 and 2019, and are pretty low with Michigan in 2017. Of course Alabama is on top of the bunch this year, but Cincy isn’t too far behind Michigan and Georgia.\nWhat about defense?\n\n\nCode\nggplot() + \n  geom_bump(data=shortnames, \n    aes(x=Season, y=`DefYards/G`, color=Name)) +\n  geom_point(data=shortnames, \n    aes(x=Season, y=`DefYards/G`, color=Name), size = 4) +\n  geom_text(data = shortnames %&gt;% \n    filter(Season == min(Season)), aes(x = Season - .2, y=`DefYards/G`, label = Name), size = 3, hjust = 1) +\n  geom_text(data = shortnames %&gt;%\n    filter(Season == max(Season)), aes(x = Season + .2, y=`DefYards/G`, label = Name), size = 3, hjust = 0) +\n  scale_color_manual(values = c(\"#BA0C2F\",\"#595959\", \"#FFCB05\", \"#00843D\", \"#FF7300\", \"grey\")) +\n  scale_y_reverse() +\n  labs(x = \" \",\n    y=\"Defensive Yards per Game\", \n    title=\"...But Defenses Win Championships\", \n    subtitle=\"This time, they might not be Georgia, but they're still in with the rest of the pack\",\n    caption=\"Source: CFB Reference | By Molly Robinson\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 13), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_x_continuous(breaks=c(2014,2015,2016, 2017, 2018, 2019, 2020, 2021))\n\n\n\n\n\nOn defense, the Bearcats are fourth this year, right behind Georgia, Oklahoma State and Alabama. Other than 2015 through 2017, Cincinnati’s defensive yards stay low.\nNow that we’ve seen per game, let’s take a look at average yards per play.\nI focused on the top six teams again and took into account their offensive and defensive yards per play.\n\n\nCode\ntopsixeveryyear %&gt;% \n  group_by(Name, Season) %&gt;% \n  summarise(\n    TotalOffPlayYards = sum(`OffYards/Play`),\n    TotalDefPlayYards = sum(`DefYards/Play`)) %&gt;% \n  filter(Season == \"2021\") -&gt; yards\n\n\n`summarise()` has grouped output by 'Name'. You can override using the\n`.groups` argument.\n\n\nSince I want to take a look at 2021, I filtered out this year.\n\n\nCode\nyards %&gt;% \n  pivot_longer(\n    cols=starts_with(\"Season\"), \n    names_to=\"Type\", \n    values_to=\"Yards\")\n\n\n# A tibble: 20 × 5\n# Groups:   Name [20]\n   Name           TotalOffPlayYards TotalDefPlayYards Type   Yards\n   &lt;chr&gt;                      &lt;dbl&gt;             &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1 Alabama                     6.64              4.62 Season  2021\n 2 Baylor                      6.53              5.47 Season  2021\n 3 Cincinnati                  6.81              4.29 Season  2021\n 4 Clemson                     5.25              4.44 Season  2021\n 5 Florida State               5.79              5.19 Season  2021\n 6 Georgia                     7.06              3.67 Season  2021\n 7 Iowa                        4.6               4.52 Season  2021\n 8 LSU                         5.34              5.39 Season  2021\n 9 Michigan                    6.41              4.78 Season  2021\n10 Michigan State              6.51              5.63 Season  2021\n11 Notre Dame                  6.13              5.14 Season  2021\n12 Ohio State                  7.78              5.21 Season  2021\n13 Oklahoma                    6.77              5.63 Season  2021\n14 Oklahoma State              5.52              4.44 Season  2021\n15 Oregon                      6.36              5.22 Season  2021\n16 Penn State                  5.32              4.67 Season  2021\n17 TCU                         6.68              7.21 Season  2021\n18 Texas A&M                   5.96              4.66 Season  2021\n19 Washington                  4.98              5.02 Season  2021\n20 Wisconsin                   5.6               4.1  Season  2021\n\n\nHere is both offensive yards and defensive yards per play, but it’s hard to follow. With that being said, I put it in a stacked bar chart for an easier read.\n\n\nCode\nyards %&gt;% \n  pivot_longer(\n    cols=starts_with(\"Total\"), \n    names_to=\"Type\", \n    values_to=\"Yards\") -&gt; newyards\n\n\nIn my data set, I decided to filter out both Cincinnati and Georgia. Georgia has had a stout offense and defense this year, so I wanted to compare where the Bearcats stand next to the Bulldogs.\n\n\nCode\nnewyards %&gt;% \n  filter(Name == \"Cincinnati\") -&gt; cincy\n\n\n\n\nCode\nnewyards %&gt;% \n  filter(Name == \"Georgia\") -&gt; dawgs\n\n\nThis particular set not only has the top six teams from this season, but all of the top six teams we’ve seen in the playoff era. I did this to see how teams have changed over time, and where they stand now.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=newyards, aes(x=reorder(Name, Yards), weight=Yards, fill=Type)) +\n  geom_bar(\n    data=cincy, aes(x=reorder(Name, Yards), weight=Yards, fill=Type, color=Type)) +\n  geom_bar(\n    data=dawgs, aes(x=reorder(Name, Yards), weight=Yards, fill=Type, color=Type)) +\n  coord_flip() + \n  scale_fill_manual(values=c(\"light grey\", \"dark grey\")) +\n  scale_color_manual(values=c(\"#E00122\", \"black\")) + \n  labs(x = \" \",\n    y=\"Yards Per Play\", \n    title=\"The Bearcats versus The Bulldogs\", \n    subtitle=\"Offense is &lt;span style = 'color:black;'&gt;*black*&lt;/span&gt; and defense is &lt;span style = 'color:#E00122;'&gt;*red*.&lt;/span&gt;\",\n    caption=\"Source: CFB Reference | By Molly Robinson\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 13), \n    plot.subtitle = element_markdown(size=10), \n    panel.grid.minor = element_blank())\n\n\n\n\n\nPretty dang close. To get picky, Cincinatti’s total offensive yards per play is at 6.81 yards, whereas Georgia’s stands at 7.06. On the other side of the ball, Cincy features 4.29 defensive yards per play, which isn’t too far from Georgia’s 3.67. Yes, the Dawgs have slightly better stats, but the SEC is also a lot different from the AAC. But keep this in mind, Georgia played four top-25 ranked teams in the regular season. Their other competition was other SEC schools, like South Carolina, Vanderbilt, Mizzou, and Tennessee, not exactly the conference’s best teams.\nWith this all being said, I do think Cincinnati deserves a spot in the college football playoff this year. They do seem to compare to some of the big dogs of the Power Five. Somewhere… 2017 Scott Frost is highly disappointed…"
  },
  {
    "objectID": "posts/what-was-sabans-best-alabama-team/index.html",
    "href": "posts/what-was-sabans-best-alabama-team/index.html",
    "title": "What was Saban’s best Alabama team?",
    "section": "",
    "text": "Nick Saban’s dynasty as Alabama head coach includes over 170 wins, 100 plus draft pics, three Heisman winners and eight National Championship appearances, six of which resulted in National Titles.\nSince 2008, Alabama under Saban has seen winning seasons, with 10 wins being their lowest number of wins. Alabama’s 2009, 2011, 2012, 2015, 2017, and 2020 National Championship titles are impressive in this era of college football, but which Saban team is considered the best?\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(gt)\nlibrary(ggbump)\n\n\nFirst, I gathered the total offensive and defensive data from each year the Crimson Tide won the national title.\n\n\nCode\noffense09 &lt;- read_csv(\"totaloffense09.csv\") %&gt;% mutate(Season = 2009)\ndefense09 &lt;- read_csv(\"totaldefense09.csv\") %&gt;% mutate(Season = 2009)\noffense11 &lt;- read_csv(\"totaloffense11.csv\") %&gt;% mutate(Season = 2011)\ndefense11 &lt;- read_csv(\"totaldefense11.csv\") %&gt;% mutate(Season = 2011)\noffense12 &lt;- read_csv(\"totaloffense12.csv\") %&gt;% mutate(Season = 2012)\ndefense12 &lt;- read_csv(\"totaldefense12.csv\") %&gt;% mutate(Season = 2012)\noffense15 &lt;- read_csv(\"totaloffense15.csv\") %&gt;% mutate(Season = 2015)\ndefense15 &lt;- read_csv(\"totaldefense15.csv\") %&gt;% mutate(Season = 2015)\noffense17 &lt;- read_csv(\"totaloffense17.csv\") %&gt;% mutate(Season = 2017)\ndefense17 &lt;- read_csv(\"totaldefense17.csv\") %&gt;% mutate(Season = 2017)\noffense20 &lt;- read_csv(\"totaloffense20.csv\") %&gt;% mutate(Season = 2020)\ndefense20 &lt;- read_csv(\"totaldefense20.csv\") %&gt;% mutate(Season = 2020)\n\n\nNow that I have new offensive and defensive data from each year, I’ll bind each years offenses and defenses together in one set. Then, I’ll join the new offensive and defensive data together to have an all around total.\n\n\nCode\noffense &lt;- bind_rows(offense09, offense11, offense12, offense15, offense17, offense20 )\n\n\n\n\nCode\ndefense &lt;- bind_rows(defense09, defense11, defense12, defense15, defense17, defense20)\n\n\n\n\nCode\ntotals &lt;- offense %&gt;%\n  left_join(defense, by=c(\"Name\", \"Season\"))\n\n\nIn my totals, I have EVERY NCAA college football team’s data. However, Kent State won’t really compare to Alabama’s stats, especially when they only played four games in 2020. With that being said, I decided to focus on the SEC alone, mostly because almost all of Alabama’s competition comes from here.\n\n\nCode\nsec &lt;- c(\"Alabama\", \"Auburn\", \"Georgia\", \"Florida\", \"Tennessee\", \"Mississippi State\", \"Mississippi\", \"Arkansas\", \"Kentucky\", \"Vanderbilt\", \"Missouri\", \"Texas A&M\", \"LSU\", \"South Carolina\")\n\n\nNow time to prove which Alabama team is statistically the best, and this is where z-scores come into play. In order to find the best Bama team, I’ll calculate each team’s total z-score using offensive yards per game and defensive yards per game.\nOnce I have my total offensive and defensive z-scores from yards per game, I can then add them together to get a total for each SEC team from each year Alabama won the title game.\n\n\nCode\nzscores &lt;- totals %&gt;% \n  filter(Name %in% sec) %&gt;% \n  group_by(Season) %&gt;%\n  mutate(\n  TotalOffZScore = scale(`OffYards/G`, center=TRUE, scale=TRUE),\n  TotalDefZScore = scale(`DefYards/G`, center=TRUE, scale=TRUE) * -1,\n  TotalZScore = TotalOffZScore + (TotalDefZScore), \n  NameYear = paste(Name, Season, sep = \" \"))\n\n\nOne might notice I multiplied the defensive z-scores by -1. This is to make positive defensive z-scores a good thing.\n\n\nCode\nzscores %&gt;% \n  arrange(desc(TotalZScore))\n\n\n# A tibble: 84 × 22\n# Groups:   Season [6]\n   Rank.x Name        G.x OffRu…¹ OffPa…² OffPl…³ OffTo…⁴ OffYa…⁵ OffYa…⁶ Season\n    &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1      6 Florida      14    3105    3305     919    6410    6.97    458.   2009\n 2     31 Alabama      13    2788    2797     865    5585    6.46    430.   2011\n 3      4 Alabama      13    2385    4656     902    7041    7.81    542.   2020\n 4     31 Alabama      14    3185    3052     898    6237    6.95    446.   2012\n 5     29 Alabama      14    3509    2708     944    6217    6.59    444.   2017\n 6     45 Alabama      15    2999    3407    1088    6406    5.89    427.   2015\n 7     43 Alabama      14    3011    2631     947    5642    5.96    403    2009\n 8     33 Texas A&M    10    2051    2341     678    4392    6.48    439.   2020\n 9     32 Georgia      15    3876    2653     975    6529    6.7     435.   2017\n10      3 Texas A&M    13    3147    4114    1025    7261    7.08    558.   2012\n# … with 74 more rows, 12 more variables: Rank.y &lt;dbl&gt;, G.y &lt;dbl&gt;,\n#   DefRushYards &lt;dbl&gt;, DefPassYards &lt;dbl&gt;, DefPlays &lt;dbl&gt;,\n#   DefTotalYards &lt;dbl&gt;, `DefYards/Play` &lt;dbl&gt;, `DefYards/G` &lt;dbl&gt;,\n#   TotalOffZScore &lt;dbl[,1]&gt;, TotalDefZScore &lt;dbl[,1]&gt;, TotalZScore &lt;dbl[,1]&gt;,\n#   NameYear &lt;chr&gt;, and abbreviated variable names ¹​OffRushYards,\n#   ²​OffPassYards, ³​OffPlays, ⁴​OffTotalYards, ⁵​`OffYards/Play`, ⁶​`OffYards/G`\n\n\nWell, Alabama might not be the very top, but all of their National Championship winning teams are in the top 10 of total z-scores. Love them or hate them, it’s impressive all of their teams are in the top 10 and are all right next to each other.\nLet’s take a look at the bigger picture, and look at all of the SEC teams in those years. What does this look like? What team was the best team?\n\n\nCode\nal &lt;- zscores %&gt;% \n  filter(Name == \"Alabama\")\n\n\n\n\nCode\nggplot() + \n  geom_bar(data=zscores, aes(x = reorder(NameYear, -TotalZScore), \n    weight = TotalZScore)) +\n  geom_bar(data=al, aes(x = reorder(NameYear, -TotalZScore), \n    weight = TotalZScore), fill=\"#9E1B32\") +\n  labs(x = \"SEC Teams\",\n    y=\"Total Z-Score\", \n    title=\"Where Did the Tide Roll?\", \n    subtitle=\"Alabama's national title teams compared to all SEC teams in the same year.\",\n    caption=\"Source: CFB Reference | By Molly Robinson\") + \n  theme_minimal() +\n  coord_flip() +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 13), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\nHello, Florida 2009. Based on z-scores, Alabama’s worst team under Saban was his 2009 team, which is also known as the year Alabama beat Florida in the National Title game. cue Tim Tebow crying\nThe best Bama team? Looks like it’s the 2011 National Championship team. If you don’t remember, in 2011 the Crimson Tide finished their regular 11-1, with their only loss being to LSU. Saban and the Tide later got their revenge, as these two teams met again in New Orleans in the National Title game. Bama came out on top 21-0 to give them the 2011 ’ship win.\nBesides Bama, this graph makes it slightly difficult to keep track of the other SEC teams. So, let’s put them in one line.\n\n\nCode\nggplot() + \n  geom_bump(data=zscores, \n    aes(x=Season, y=TotalZScore, color=Name)) +\n  geom_point(data=zscores, \n    aes(x=Season, y=TotalZScore, color=Name), size = 4) +\n  geom_text(data = zscores %&gt;% \n    filter(Season == min(zscores$Season)), \n    aes(x = Season - .2, y=TotalZScore, label = Name), \n    size = 3, hjust = 1) +\n  geom_text(data = zscores %&gt;% \n    filter(Season == max(zscores$Season)), \n    aes(x = Season + .2, y=TotalZScore, label = Name), \n    size = 3, hjust = 0) +\n  labs(x = \"Season\",\n    y=\"Total Z-Score\", \n    title=\"Bama Z-Scores Stay on Top\", \n    subtitle=\"Saban's Crimson Tide teams stay leaps and bound above the rest\",\n    caption=\"Source: CFB Reference | By Molly Robinson\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 13), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) +\n  scale_color_manual(values = c(\"#9E1B32\",\"grey\", \"grey\", \"grey\", \"grey\", \"grey\",\"grey\", \"grey\", \"grey\", \"grey\", \"grey\", \"grey\", \"grey\", \"grey\")) +\n  scale_x_continuous(breaks=c(2009,2011,2012, 2015, 2017, 2020)) + \n  scale_y_reverse(breaks=c(-3,-2,-1,0,1,2,3))\n\n\n\n\n\nIf there’s one thing this bump chart shows us, it’s that Alabama is consistent each year. Again, the only team with a better z-score was Florida in 2009, yet technically Saban’s worst title team STILL managed to beat them. cue Tim Tebow crying, again\nNow that we’ve seen the big picture with each of the totals, let’s look at both offense and defense separately.\n\n\nCode\nggplot() + \n  geom_point(data=zscores, \n    aes(x=TotalOffZScore, y=TotalDefZScore), color=\"grey\") +\n  geom_point(data=al, \n    aes(x=TotalOffZScore, y=TotalDefZScore), color=\"#9E1B32\") +\n  geom_vline(xintercept = 0) + \n  geom_hline(yintercept = 0) +\n  geom_text_repel(\n    data=al, \n    aes(x=TotalOffZScore, y=TotalDefZScore, label=NameYear)\n  ) +\n  labs(x = \"Total Offensive Z-Score\",\n    y=\"Total Defensive Z-Score\", \n    title=\"Surprise! Alabama is at the top!\", \n    subtitle=\"The Tide's individual z-scores keep them on top of the SEC\",\n    caption=\"Source: CFB Reference | By Molly Robinson\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\nThe top right corner is where teams want to be, meaning they have good offensive and defensive z-scores. All of Saban’s Alabama teams are where they should be, in that top right corner.\nEarlier, I said Alabama’s 2011 team was the best based on z-scores. Although 2020’s Bama team might have the best offensive z-score, their defense holds the lowest of the Saban squads.\nWith this, I would still put 2011 Bama as the top overall Alabama team. They have the highest defensive z-score and the second highest offensive z-score.\nNick Saban’s Alabama teams have proven themselves to be national powerhouses every year, even when they weren’t always at the very top."
  },
  {
    "objectID": "posts/which-rookie-wrs-to-draft/index.html",
    "href": "posts/which-rookie-wrs-to-draft/index.html",
    "title": "Molly G. Robinson",
    "section": "",
    "text": "title: “Fantasy Predictions for the 2023 Rookie Class of Wide Receivers” author: “Molly Robinson” date: ‘2023-05-11’ categories: [fantasy, football, rankings] format: html: code-fold: true\nThe NFL Draft has come to an end and the league is finalizing schedules, meaning football fans and fantasy football junkies alike are anticipating the start of the season and drafting their dream fantasy rosters.\nFantasy football is meant to be taken very seriously, as fans will soon closely monitor schedules, plan what players they want to draft, and create their own leagues.\nWith the fantasy draft, finding key receivers is crucial to a team’s success. There’s currently a plethora of incredible wide receivers, but don’t neglect this new very talented draft class.\nSo… who should you draft? Let’s look at some different metrics.\nWe’re going to take a look at PPR, or points per reception, total receptions, receiving yards, yards per reception and the offenses’ success.\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(cfbfastR)\nlibrary(janitor)\nlibrary(bonsai)\nlibrary(gt)\nlibrary(ggplot2)\nset.seed(1001)\n\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrdraftedstatswithratingsfixed.csv\")\n\nwrselected &lt;- wrstats %&gt;%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_receptions,\n    total_yards,\n    total_ypr,\n    rating,\n    FantPt\n  ) %&gt;% na.omit()\n\nplayer_split &lt;- initial_split(wrselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\n\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;-\n  recipe(FantPt ~ ., data = player_train) %&gt;%\n  update_role(name, year, college_team, nfl_team, new_role = \"ID\")\n\n\nxg_mod &lt;- boost_tree(\n  trees = tune(), \n  learn_rate = tune(),\n  tree_depth = tune(), \n  min_n = tune(),\n  loss_reduction = tune(), \n  sample_size = tune(), \n  mtry = tune(), \n  ) %&gt;% \n  set_mode(\"regression\") %&gt;% \n  set_engine(\"xgboost\")\n\n\nxg_workflow &lt;- \n  workflow() %&gt;% \n  add_model(xg_mod) %&gt;% \n  add_recipe(player_recipe)\n\n\nxgb_grid &lt;- grid_latin_hypercube(\n  trees(),\n  tree_depth(),\n  min_n(),\n  loss_reduction(),\n  sample_size = sample_prop(),\n  finalize(mtry(), player_train),\n  learn_rate()\n)\n\nplayer_folds &lt;- vfold_cv(player_train)\n\nxgb_res &lt;- tune_grid(\n  xg_workflow,\n  resamples = player_folds,\n  grid = xgb_grid,\n  control = control_grid(save_pred = TRUE)\n)\n\nbest_rmse &lt;- select_best(xgb_res, \"rmse\")\n\nfinal_xgb &lt;- finalize_workflow(\n  xg_workflow,\n  best_rmse\n)\n\nxg_fit &lt;- \n  final_xgb %&gt;% \n  fit(data = player_train)\n\nxgpredict &lt;- \n  xg_fit %&gt;% \n  predict(new_data = player_train) %&gt;%\n  bind_cols(player_train) \n\n\nmetrics(xgpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard      25.0  \n2 rsq     standard       0.755\n3 mae     standard      19.1  \n\nxgpredicttest &lt;- \n  xg_fit %&gt;% \n  predict(new_data = player_test) %&gt;%\n  bind_cols(player_test)\n\n\nmetrics(xgpredicttest, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard      47.8  \n2 rsq     standard       0.210\n3 mae     standard      36.8\nNow, let’s apply to the new draft class!\ncurrentwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/currentwrstats.csv\")\n\n\ncurrentwrselected &lt;- currentwrstats %&gt;%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_receptions,\n    total_yards,\n    total_ypr,\n    rating\n  ) \n\n\ncurrentxgpredict &lt;- xg_fit %&gt;% \n  predict(new_data = currentwrselected) %&gt;%\n  bind_cols(currentwrselected)\n\ncurrentxgpredict %&gt;% \n  top_n(5, wt=.pred) %&gt;%\n  select(name, nfl_team, overall, .pred) %&gt;%\n  arrange(desc(.pred)) %&gt;%\n  gt() %&gt;%\n  cols_label(\n    name = \"Name\",\n    nfl_team = \"NFL Team\",\n    overall = \"Overall Draft Pick\",\n    .pred = \"Pred Fantasy Points\"\n  ) %&gt;%\n  tab_header(\n    title = \"Which Rookie Wide Receivers Should You Draft?\",\n    subtitle = \"Don't Sleep on the Later Draft Picks.\"\n  ) %&gt;%  \n  tab_source_note(\n    source_note = md(\"By: Molly Robinson\")\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %&gt;% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %&gt;%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %&gt;%\n  opt_row_striping() %&gt;% \n  opt_table_lines(\"none\") %&gt;%\n    fmt_number(\n    columns = c(.pred),\n    decimals = 1\n  )\n\n\n\n\n\n  \n    \n      Which Rookie Wide Receivers Should You Draft?\n    \n    \n      Don't Sleep on the Later Draft Picks.\n    \n    \n      Name\n      NFL Team\n      Overall Draft Pick\n      Pred Fantasy Points\n    \n  \n  \n    Jordan Addison\nMinnesota\n23\n109.5\n    Jayden Reed\nGreen Bay\n50\n97.5\n    Jaxon Smith-Njigba\nSeattle\n20\n95.6\n    Jalin Hyatt\nNew York\n73\n94.9\n    Quentin Johnston\nLos Angeles\n21\n94.4\n  \n  \n    \n      By: Molly Robinson\nAnd behold! This table shows my predictions for the top rookie wide receiers for next year. To get here, I looked at total receptions, total yards, total yards per reception, rating, and fan points, all under the XG Boost engine."
  },
  {
    "objectID": "posts/which-rookie-wrs-to-draft/index.html#jordan-addison---minnesota-vikings",
    "href": "posts/which-rookie-wrs-to-draft/index.html#jordan-addison---minnesota-vikings",
    "title": "Molly G. Robinson",
    "section": "1) Jordan Addison - Minnesota Vikings",
    "text": "1) Jordan Addison - Minnesota Vikings\nWith my machine, rookie Jordan Addison is expected to have the best season between the rookie receivers. His predicted fantasy points are at 109.5, which isn’t too shabby for a first rounder."
  },
  {
    "objectID": "posts/which-rookie-wrs-to-draft/index.html#jayden-reed---green-bay-packers",
    "href": "posts/which-rookie-wrs-to-draft/index.html#jayden-reed---green-bay-packers",
    "title": "Molly G. Robinson",
    "section": "2) Jayden Reed - Green Bay Packers",
    "text": "2) Jayden Reed - Green Bay Packers\nIn the number two spot sits Reed from Michigan State. Reed was the 50th pick in the 2023 draft and is expected to have 97.5 fantasy points."
  },
  {
    "objectID": "posts/which-rookie-wrs-to-draft/index.html#jaxon-smith-njigba---seattle-seahawks",
    "href": "posts/which-rookie-wrs-to-draft/index.html#jaxon-smith-njigba---seattle-seahawks",
    "title": "Molly G. Robinson",
    "section": "3) Jaxon Smith-Njigba - Seattle Seahawks",
    "text": "3) Jaxon Smith-Njigba - Seattle Seahawks\nThe much-anticipated Smith-Njigba sits at number three in my fantasy point rankings. While at Ohio State, he put up impressive numbers that will be beneficial for the Seahawks, and he’s predicted to bring in 95.6 for a fantasy team."
  },
  {
    "objectID": "posts/which-rookie-wrs-to-draft/index.html#jalin-hyatt---new-york-giants",
    "href": "posts/which-rookie-wrs-to-draft/index.html#jalin-hyatt---new-york-giants",
    "title": "Molly G. Robinson",
    "section": "4) Jalin Hyatt - New York Giants",
    "text": "4) Jalin Hyatt - New York Giants\nThe Tennessee product headed to the Giants is the lowest draft pick on my list, but don’t count him out. Right now, he’s expected to have 94.5 fantasy points, but his work with the Vols proves he’s a solid receiver."
  },
  {
    "objectID": "posts/which-rookie-wrs-to-draft/index.html#quentin-johnston---los-angeles-chargers",
    "href": "posts/which-rookie-wrs-to-draft/index.html#quentin-johnston---los-angeles-chargers",
    "title": "Molly G. Robinson",
    "section": "5) Quentin Johnston - Los Angeles Chargers",
    "text": "5) Quentin Johnston - Los Angeles Chargers\nLast on my list is Quentin Johnston, the rookie out of TCU. Johnston was the first pick out of TCU and expected to have 94.4 fantasy points this season. The Chargers lack speed on their offense and it’s believed Johnston can be a huge asset to help the Chargers and Herbert."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "code-fold: true\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nHow I tried to perfect my March Madness\n\n\n\n\n\n\n\nbasketball\n\n\nMarchMadness\n\n\nsports\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\nMolly Robinson\n\n\n\n\n\n\n  \n\n\n\n\nWho deserves to be in the college football playoffs?\n\n\n\n\n\n\n\nfootball\n\n\ncollege\n\n\nplayoff\n\n\n\n\n\n\n\n\n\n\n\nDec 2, 2021\n\n\nMolly Robinson\n\n\n\n\n\n\n  \n\n\n\n\nWhat was Saban’s best Alabama team?\n\n\n\n\n\n\n\nfootball\n\n\nalabama\n\n\ncollege\n\n\n\n\n\n\n\n\n\n\n\nOct 27, 2021\n\n\nMolly Robinson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]